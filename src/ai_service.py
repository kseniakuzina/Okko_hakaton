import os
import json
import requests
from typing import Dict, Any
from dotenv import load_dotenv
from db_client import search_movies, search_by_keywords

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

class AIService:
    def __init__(self):
        self.api_key = os.getenv("OPENROUTER_API_KEY")
        self.base_url = "https://openrouter.ai/api/v1"
        
    def analyze_user_request(self, user_message: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ OpenRouter
        """
        system_prompt = """–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ñ–∏–ª—å–º–∞—Ö. 
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –∂–∞–Ω—Ä—ã –∏ –≥–æ–¥—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.

        –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {
            "genres": ["—Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"],
            "keywords": "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏",
            "min_year": –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å),
            "max_year": –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        }

        –ñ–∞–Ω—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ: –∫–æ–º–µ–¥–∏—è, –¥—Ä–∞–º–∞, –±–æ–µ–≤–∏–∫, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, —É–∂–∞—Å—ã, —Ç—Ä–∏–ª–ª–µ—Ä, –º–µ–ª–æ–¥—Ä–∞–º–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –¥–µ—Ç–µ–∫—Ç–∏–≤, —Ñ—ç–Ω—Ç–µ–∑–∏, –∫—Ä–∏–º–∏–Ω–∞–ª, —Å–µ–º–µ–π–Ω—ã–π

        –ü—Ä–∏–º–µ—Ä—ã:
        - "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ä—É—é –∫–æ–º–µ–¥–∏—é" -> {"genres": ["–∫–æ–º–µ–¥–∏—è"], "keywords": "–∫–æ–º–µ–¥–∏—è", "min_year": 1950, "max_year": 2000}
        - "–ì—Ä—É—Å—Ç–Ω–∞—è –¥—Ä–∞–º–∞ –ø—Ä–æ –ª—é–±–æ–≤—å" -> {"genres": ["–¥—Ä–∞–º–∞", "–º–µ–ª–æ–¥—Ä–∞–º–∞"], "keywords": "–ª—é–±–æ–≤—å", "min_year": null, "max_year": null}
        - "–ß—Ç–æ-—Ç–æ –≤–µ—Å–µ–ª–æ–µ –Ω–∞ –≤–µ—á–µ—Ä" -> {"genres": ["–∫–æ–º–µ–¥–∏—è"], "keywords": "–≤–µ—Å–µ–ª—ã–π", "min_year": null, "max_year": null}
        - "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–µ–≤–∏–∫" -> {"genres": ["–±–æ–µ–≤–∏–∫"], "keywords": "–±–æ–µ–≤–∏–∫", "min_year": 2020, "max_year": 2024}
        """

        try:
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "meta-llama/llama-3.1-8b-instruct:free",  # –†–ê–ë–û–¢–ê–Æ–©–ê–Ø –ú–û–î–ï–õ–¨
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_message}
                    ],
                    "response_format": {"type": "json_object"},
                    "max_tokens": 500
                },
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                content = result["choices"][0]["message"]["content"]
                print(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {content}")
                
                analysis = json.loads(content)
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                analysis["user_intent"] = f"–ø–æ–∏—Å–∫ {', '.join(analysis.get('genres', []))}"
                analysis["mood"] = ""
                
                return analysis
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter: {response.status_code} - {response.text}")
                return self._fallback_analysis(user_message)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze_user_request: {e}")
            return self._fallback_analysis(user_message)
    
    def _fallback_analysis(self, user_message: str) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        user_lower = user_message.lower()
        analysis = {
            "genres": [],
            "mood": "",
            "keywords": user_message,
            "min_year": None,
            "max_year": None,
            "user_intent": "–ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞"
        }
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        genre_keywords = {
            "–∫–æ–º–µ–¥–∏—è": ["–∫–æ–º–µ–¥–∏—è", "—Å–º–µ—Ö", "—é–º–æ—Ä", "–≤–µ—Å–µ–ª", "–ø—Ä–∏–∫–ª—é—á–µ–Ω", "—Å–º–µ—à–Ω", "–≤–µ—Å–µ–ª–æ–µ"],
            "–¥—Ä–∞–º–∞": ["–¥—Ä–∞–º–∞", "–≥—Ä—É—Å—Ç–Ω", "–ø–µ—á–∞–ª", "—ç–º–æ—Ü–∏", "—á—É–≤—Å—Ç–≤", "—Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω", "–≥—Ä—É—Å—Ç–Ω–æ–µ"],
            "–±–æ–µ–≤–∏–∫": ["–±–æ–µ–≤–∏–∫", "—ç–∫—à–Ω", "action", "—Å—Ç—Ä–µ–ª—å–±–∞", "–ø–æ–≥–æ–Ω", "–±–∏—Ç–≤–∞", "—ç–∫—à–µ–Ω"],
            "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": ["—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–∫–æ—Å–º–æ—Å", "–±—É–¥—É—â", "–Ω–∞—É—á–Ω", "sci-fi", "—Ñ—ç–Ω—Ç–µ–∑–∏"],
            "—É–∂–∞—Å—ã": ["—É–∂–∞—Å", "—Ö–æ—Ä—Ä–æ—Ä", "—Å—Ç—Ä–∞—à", "–º–∏—Å—Ç–∏–∫", "–∂—É—Ç–∫"],
            "–º–µ–ª–æ–¥—Ä–∞–º–∞": ["–º–µ–ª–æ–¥—Ä–∞–º–∞", "—Ä–æ–º–∞–Ω", "–ª—é–±–æ–≤", "–æ—Ç–Ω–æ—à–µ–Ω", "—á—É–≤—Å—Ç–≤", "—Ä–æ–º–∞–Ω—Ç–∏–∫"],
            "—Ç—Ä–∏–ª–ª–µ—Ä": ["—Ç—Ä–∏–ª–ª–µ—Ä", "–Ω–∞–ø—Ä—è–∂–µ–Ω", "—Å–∞—Å–ø–µ–Ω—Å", "–¥–µ—Ç–µ–∫—Ç–∏–≤"],
            "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": ["–ø—Ä–∏–∫–ª—é—á–µ–Ω", "–ø—É—Ç–µ—à–µ—Å—Ç–≤", "—ç–∫—Å–ø–µ–¥–∏—Ü", "–∏—Å—Å–ª–µ–¥–æ–≤–∞"]
        }
        
        for genre, keywords in genre_keywords.items():
            if any(keyword in user_lower for keyword in keywords):
                analysis["genres"].append(genre)
        
        # –ê–Ω–∞–ª–∏–∑ –≥–æ–¥–∞
        if any(word in user_lower for word in ["—Å—Ç–∞—Ä—ã–π", "—Ä–µ—Ç—Ä–æ", "—Å–æ–≤–µ—Ç—Å–∫", "90-—Ö", "80-—Ö", "—Å—Ç–∞—Ä—É—é", "—Å—Ç–∞—Ä–∞—è"]):
            analysis["min_year"] = 1950
            analysis["max_year"] = 2000
        elif any(word in user_lower for word in ["–Ω–æ–≤—ã–π", "—Å–≤–µ–∂–∏–π", "–ø–æ—Å–ª–µ–¥–Ω–∏–π", "2020", "2023", "2024", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π"]):
            analysis["min_year"] = 2020
            analysis["max_year"] = 2024
            
        return analysis
    
    def search_with_ai(self, user_message: str) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ + –ø–æ–∏—Å–∫ –≤ –ë–î
        """
        print(f"\nüéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª: '{user_message}'")
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        analysis = self.analyze_user_request(user_message)
        print(f"üìä AI –∞–Ω–∞–ª–∏–∑: {analysis}")
        
        movies = []
        
        # 2. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∂–∞–Ω—Ä—ã - –∏—â–µ–º –ø–æ –∂–∞–Ω—Ä–∞–º
        if analysis["genres"]:
            filters = {
                "genre": analysis["genres"][0],  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∂–∞–Ω—Ä
                "limit": 4
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≥–æ–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if analysis["min_year"]:
                filters["min_year"] = analysis["min_year"]
            if analysis["max_year"]:
                filters["max_year"] = analysis["max_year"]
                
            movies = search_movies(filters)
        
        # 3. –ï—Å–ª–∏ –ø–æ –∂–∞–Ω—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if not movies and analysis["keywords"]:
            print(f"üîç –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {analysis['keywords']}")
            keyword_movies = search_by_keywords({
                "keywords": analysis["keywords"], 
                "limit": 4
            })
            movies.extend(keyword_movies)
        
        # 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = self._format_simple_response(user_message, movies, analysis)
        
        return {
            "analysis": analysis,
            "movies": movies,
            "response": response_text
        }
    
    def _format_simple_response(self, user_message: str, movies: list, analysis: dict) -> str:
        """–ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        
        if not movies:
            return "üòî –ù–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ!"
        
        response = f"üé¨ –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è –≤–∞—Å –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{user_message}\":\n\n"
        
        for i, movie in enumerate(movies, 1):
            response += f"{i}. **{movie['title']}**"
            if movie.get('year'):
                response += f" ({movie['year']})"
            response += "\n"
            
            if movie.get('genres'):
                response += f"   üé≠ {movie['genres']}\n"
            if movie.get('description'):
                response += f"   üìñ {movie['description'][:100]}...\n"
            response += "\n"
        
        response += "üéâ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ–∏–ª—å–º—ã - –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ!"
        
        return response

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    ai = AIService()
    
    test_queries = [
        "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é",
        "–ì—Ä—É—Å—Ç–Ω–∞—è –¥—Ä–∞–º–∞ –ø—Ä–æ –ª—é–±–æ–≤—å",
        "–°—Ç–∞—Ä—ã–π –±–æ–µ–≤–∏–∫",
        "–ß—Ç–æ-—Ç–æ –≤–µ—Å–µ–ª–æ–µ –Ω–∞ –≤–µ—á–µ—Ä"
    ]
    
    for query in test_queries:
        print(f"\n{'='*50}")
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{query}'")
        result = ai.search_with_ai(query)
        print(f"üí¨ –û—Ç–≤–µ—Ç:\n{result['response']}")