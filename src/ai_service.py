import os
import json
import requests
import re
from typing import Dict, Any
from dotenv import load_dotenv
from db_client import search_movies, search_by_keywords, search_by_year

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

class AIService:
    def __init__(self):
        self.api_key = os.getenv("OPENROUTER_API_KEY")
        self.base_url = "https://openrouter.ai/api/v1"
        
    def analyze_user_request(self, user_message: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ OpenRouter
        """
        system_prompt = """–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ñ–∏–ª—å–º–∞—Ö. 
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –∂–∞–Ω—Ä—ã, –≥–æ–¥—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.

        –í–ê–ñ–ù–û: 
        1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2021", "2020 –≥–æ–¥", "—Ñ–∏–ª—å–º—ã 2021"), 
           —Ç–æ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å min_year –∏ max_year –≤ —ç—Ç–æ—Ç –≥–æ–¥.
        
        2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–≤–∞ —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥:
           - "—Å—Ç–∞—Ä—ã–µ", "—Ä–µ—Ç—Ä–æ", "—Å–æ–≤–µ—Ç—Å–∫–∏–µ", "90-—Ö", "80-—Ö" ‚Üí min_year: 1950, max_year: 2000
           - "–Ω–æ–≤—ã–µ", "—Å–≤–µ–∂–∏–µ", "–ø–æ—Å–ª–µ–¥–Ω–∏–µ", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ", "–Ω–µ–¥–∞–≤–Ω–∏–µ" ‚Üí min_year: 2020, max_year: 2024
           - "2000-–µ", "–¥–≤—É—Ö—Ç—ã—Å—è—á–Ω—ã–µ" ‚Üí min_year: 2000, max_year: 2009
           - "2010-–µ" ‚Üí min_year: 2010, max_year: 2019
           - "–Ω–µ—Å—Ç–∞—Ä—ã–µ", "—Å—Ä–µ–¥–Ω–∏–µ" ‚Üí min_year: 2001, max_year: 2019
        
        3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤:
           - "—Ñ–∏–ª—å–º—ã 2010-2015" ‚Üí min_year: 2010, max_year: 2015
           - "—Å 2018 –ø–æ 2020" ‚Üí min_year: 2018, max_year: 2020
        4. –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –ø—Ä–æ –≥–æ–¥ –∏–ª–∏ –≤—Ä–µ–º—è —Ç–æ –≤ max_year –∑–∞–ø–∏—à–∏ —Ç–µ–∫—É—â–∏–π 2025 –≥–æ–¥ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏—Å—å –Ω–µ–≤—ã–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã

        –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {
            "genres": ["—Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"],
            "keywords": "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏",
            "min_year": –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å),
            "max_year": –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        }

        –ü—Ä–∏–º–µ—Ä—ã:
        - "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã 2021 –≥–æ–¥–∞" ‚Üí {"genres": [], "keywords": "—Ñ–∏–ª—å–º—ã", "min_year": 2021, "max_year": 2021}
        - "–ö–æ–º–µ–¥–∏–∏ 2020 –≥–æ–¥–∞" ‚Üí {"genres": ["–∫–æ–º–µ–¥–∏—è"], "keywords": "–∫–æ–º–µ–¥–∏–∏", "min_year": 2020, "max_year": 2020}
        - "–°—Ç–∞—Ä—ã–µ —Å–æ–≤–µ—Ç—Å–∫–∏–µ –∫–æ–º–µ–¥–∏–∏" ‚Üí {"genres": ["–∫–æ–º–µ–¥–∏—è"], "keywords": "—Å–æ–≤–µ—Ç—Å–∫–∏–µ –∫–æ–º–µ–¥–∏–∏", "min_year": 1950, "max_year": 2000}
        - "–ù–æ–≤—ã–µ –¥—Ä–∞–º—ã" ‚Üí {"genres": ["–¥—Ä–∞–º–∞"], "keywords": "–¥—Ä–∞–º—ã", "min_year": 2020, "max_year": 2024}
        - "–§–∏–ª—å–º—ã 2000-—Ö –≥–æ–¥–æ–≤" ‚Üí {"genres": [], "keywords": "—Ñ–∏–ª—å–º—ã", "min_year": 2000, "max_year": 2009}
        - "–ë–æ–µ–≤–∏–∫–∏ 2015-2020" ‚Üí {"genres": ["–±–æ–µ–≤–∏–∫"], "keywords": "–±–æ–µ–≤–∏–∫–∏", "min_year": 2015, "max_year": 2020}
        - "–ù–µ—Å—Ç–∞—Ä—ã–µ —Ç—Ä–∏–ª–ª–µ—Ä—ã" ‚Üí {"genres": ["—Ç—Ä–∏–ª–ª–µ—Ä"], "keywords": "—Ç—Ä–∏–ª–ª–µ—Ä—ã", "min_year": 2001, "max_year": 2019}
        - "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞" ‚Üí {"genres": ["—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"], "keywords": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "min_year": 2020, "max_year": 2024}
        """

        try:
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "google/gemini-2.0-flash-thinking-exp:free",
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_message}
                    ],
                    "response_format": {"type": "json_object"},
                    "max_tokens": 500
                },
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                content = result["choices"][0]["message"]["content"]
                print(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {content}")
                
                analysis = json.loads(content)
                analysis["user_intent"] = f"–ø–æ–∏—Å–∫ {', '.join(analysis.get('genres', []))}"
                analysis["mood"] = ""
                
                return analysis
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter: {response.status_code}")
                return self._fallback_analysis(user_message)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze_user_request: {e}")
            return self._fallback_analysis(user_message)
    
    def _fallback_analysis(self, user_message: str) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        user_lower = user_message.lower()
        analysis = {
            "genres": [],
            "mood": "",
            "keywords": user_message,
            "min_year": None,
            "max_year": None,
            "user_intent": "–ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞"
        }
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        genre_keywords = {
            "–∫–æ–º–µ–¥–∏—è": ["–∫–æ–º–µ–¥–∏—è", "—Å–º–µ—Ö", "—é–º–æ—Ä", "–≤–µ—Å–µ–ª", "–ø—Ä–∏–∫–ª—é—á–µ–Ω", "—Å–º–µ—à–Ω", "–≤–µ—Å–µ–ª–æ–µ", "–∫–æ–º–µ–¥–∏–∏"],
            "–¥—Ä–∞–º–∞": ["–¥—Ä–∞–º–∞", "–≥—Ä—É—Å—Ç–Ω", "–ø–µ—á–∞–ª", "—ç–º–æ—Ü–∏", "—á—É–≤—Å—Ç–≤", "—Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω", "–≥—Ä—É—Å—Ç–Ω–æ–µ", "–¥—Ä–∞–º—ã"],
            "–±–æ–µ–≤–∏–∫": ["–±–æ–µ–≤–∏–∫", "—ç–∫—à–Ω", "action", "—Å—Ç—Ä–µ–ª—å–±–∞", "–ø–æ–≥–æ–Ω", "–±–∏—Ç–≤–∞", "—ç–∫—à–µ–Ω", "–±–æ–µ–≤–∏–∫–∏"],
            "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": ["—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–∫–æ—Å–º–æ—Å", "–±—É–¥—É—â", "–Ω–∞—É—á–Ω", "sci-fi", "—Ñ—ç–Ω—Ç–µ–∑–∏"],
            "—É–∂–∞—Å—ã": ["—É–∂–∞—Å", "—Ö–æ—Ä—Ä–æ—Ä", "—Å—Ç—Ä–∞—à", "–º–∏—Å—Ç–∏–∫", "–∂—É—Ç–∫", "—É–∂–∞—Å—ã"],
            "–º–µ–ª–æ–¥—Ä–∞–º–∞": ["–º–µ–ª–æ–¥—Ä–∞–º–∞", "—Ä–æ–º–∞–Ω", "–ª—é–±–æ–≤", "–æ—Ç–Ω–æ—à–µ–Ω", "—á—É–≤—Å—Ç–≤", "—Ä–æ–º–∞–Ω—Ç–∏–∫", "–º–µ–ª–æ–¥—Ä–∞–º—ã"],
            "—Ç—Ä–∏–ª–ª–µ—Ä": ["—Ç—Ä–∏–ª–ª–µ—Ä", "–Ω–∞–ø—Ä—è–∂–µ–Ω", "—Å–∞—Å–ø–µ–Ω—Å", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ç—Ä–∏–ª–ª–µ—Ä—ã"],
            "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": ["–ø—Ä–∏–∫–ª—é—á–µ–Ω", "–ø—É—Ç–µ—à–µ—Å—Ç–≤", "—ç–∫—Å–ø–µ–¥–∏—Ü", "–∏—Å—Å–ª–µ–¥–æ–≤–∞", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"]
        }
        
        for genre, keywords in genre_keywords.items():
            if any(keyword in user_lower for keyword in keywords):
                analysis["genres"].append(genre)
        
        # –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ì–û–î–ê - –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        current_year = 2024
        
        # 1. –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥–æ–¥–æ–≤
        year_pattern = r'\b(19\d{2}|20\d{2})\b'
        years_found = re.findall(year_pattern, user_message)
        
        if years_found:
            years = [int(year) for year in years_found]
            if len(years) == 1:
                # –û–¥–∏–Ω –≥–æ–¥
                analysis["min_year"] = years[0]
                analysis["max_year"] = years[0]
                print(f"üìÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–¥: {years[0]}")
            elif len(years) == 2:
                # –î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤
                analysis["min_year"] = min(years)
                analysis["max_year"] = max(years)
                print(f"üìÖ –ù–∞–π–¥–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {min(years)}-{max(years)}")
        
        # 2. –ü–æ–∏—Å–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
        elif not analysis["min_year"]:
            if any(word in user_lower for word in ["—Å—Ç–∞—Ä—ã–π", "—Ä–µ—Ç—Ä–æ", "—Å–æ–≤–µ—Ç—Å–∫", "90-—Ö", "80-—Ö", "—Å—Ç–∞—Ä—É—é", "—Å—Ç–∞—Ä–∞—è", "–∫–ª–∞—Å—Å–∏–∫", "—Å–æ–≤–µ—Ç—Å–∫–∏–µ"]):
                analysis["min_year"] = 1950
                analysis["max_year"] = 2000
                print("üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –ø–µ—Ä–∏–æ–¥: —Å—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å–º—ã (1950-2000)")
            
            elif any(word in user_lower for word in ["–Ω–æ–≤—ã–π", "—Å–≤–µ–∂–∏–π", "–ø–æ—Å–ª–µ–¥–Ω–∏–π", "2023", "2024", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–Ω–µ–¥–∞–≤–Ω–∏–π", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–π"]):
                analysis["min_year"] = 2020
                analysis["max_year"] = current_year
                print("üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –ø–µ—Ä–∏–æ–¥: –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã (2020-2024)")
            
            elif any(word in user_lower for word in ["2000-—Ö", "–¥–≤—É—Ö—Ç—ã—Å—è—á", "2000-–µ", "–Ω—É–ª–µ–≤—ã–µ"]):
                analysis["min_year"] = 2000
                analysis["max_year"] = 2009
                print("üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –ø–µ—Ä–∏–æ–¥: 2000-–µ –≥–æ–¥—ã")
            
            elif any(word in user_lower for word in ["2010-—Ö", "–¥–µ—Å—è—Ç—ã–µ", "2010-–µ"]):
                analysis["min_year"] = 2010
                analysis["max_year"] = 2019
                print("üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –ø–µ—Ä–∏–æ–¥: 2010-–µ –≥–æ–¥—ã")
            
            elif any(word in user_lower for word in ["–Ω–µ—Å—Ç–∞—Ä—ã–π", "—Å—Ä–µ–¥–Ω–∏–π", "–Ω–µ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π", "–Ω–µ –¥—Ä–µ–≤–Ω–∏–π"]):
                analysis["min_year"] = 2001
                analysis["max_year"] = 2019
                print("üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –ø–µ—Ä–∏–æ–¥: –Ω–µ—Å—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å–º—ã (2001-2019)")
            
            # –ü–æ–∏—Å–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ç–∏–ø–∞ "2010-2015"
            range_pattern = r'(\d{4})-(\d{4})'
            range_match = re.search(range_pattern, user_message)
            if range_match:
                start_year = int(range_match.group(1))
                end_year = int(range_match.group(2))
                analysis["min_year"] = start_year
                analysis["max_year"] = end_year
                print(f"üìÖ –ù–∞–π–¥–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: {start_year}-{end_year}")
                
        return analysis
    
    def search_with_ai(self, user_message: str) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ + –ø–æ–∏—Å–∫ –≤ –ë–î
        """
        print(f"\nüéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª: '{user_message}'")
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        analysis = self.analyze_user_request(user_message)
        print(f"üìä AI –∞–Ω–∞–ª–∏–∑: {analysis}")
        
        movies = []
        
        # 2. –ü–†–ò–û–†–ò–¢–ï–¢: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ–¥–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
        if analysis["min_year"] and analysis["max_year"] and analysis["min_year"] == analysis["max_year"]:
            print(f"üéØ –ó–∞–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ–¥–µ: {analysis['min_year']}")
            movies = search_by_year({
                "year": analysis["min_year"],
                "limit": 8
            })
        
        # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –≥–æ–¥—É –∏–ª–∏ —ç—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ - –∏—â–µ–º –ø–æ –∂–∞–Ω—Ä–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        if not movies and analysis["genres"]:
            filters = {
                "genre": analysis["genres"][0],
                "limit": 6
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≥–æ–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if analysis["min_year"]:
                filters["min_year"] = analysis["min_year"]
            if analysis["max_year"]:
                filters["max_year"] = analysis["max_year"]
                
            movies = search_movies(filters)
        
        # 4. –ï—Å–ª–∏ –ø–æ –∂–∞–Ω—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if not movies and analysis["keywords"]:
            print(f"üîç –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {analysis['keywords']}")
            keyword_filters = {
                "keywords": analysis["keywords"], 
                "limit": 6
            }
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≥–æ–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if analysis["min_year"]:
                keyword_filters["min_year"] = analysis["min_year"]
            if analysis["max_year"]:
                keyword_filters["max_year"] = analysis["max_year"]
                
            keyword_movies = search_by_keywords(keyword_filters)
            movies.extend(keyword_movies)
        
        # 5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = self._format_simple_response(user_message, movies, analysis)
        
        return {
            "analysis": analysis,
            "movies": movies,
            "response": response_text
        }
    
    def _format_simple_response(self, user_message: str, movies: list, analysis: dict) -> str:
        """–ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ñ–∏–ª—å–º—ã"""
        
        if not movies:
            error_msg = f"üòî –ù–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{user_message}\"\n\n"
            
            if analysis.get("min_year") and analysis.get("max_year"):
                if analysis["min_year"] == analysis["max_year"]:
                    error_msg += f"–í –±–∞–∑–µ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ {analysis['min_year']} –≥–æ–¥–∞.\n"
                else:
                    error_msg += f"–í –±–∞–∑–µ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ —Å {analysis['min_year']} –ø–æ {analysis['max_year']} –≥–æ–¥.\n"
            
            if analysis.get("genres"):
                error_msg += f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∂–∞–Ω—Ä—ã –∏–ª–∏ –≥–æ–¥—ã.\n"
            else:
                error_msg += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –∂–∞–Ω—Ä (–∫–æ–º–µ–¥–∏—è, –¥—Ä–∞–º–∞, –±–æ–µ–≤–∏–∫) –∏–ª–∏ –≥–æ–¥.\n"
                
            error_msg += "\n–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n‚Ä¢ \"–ö–æ–º–µ–¥–∏–∏ 2020 –≥–æ–¥–∞\"\n‚Ä¢ \"–ù–æ–≤—ã–µ –±–æ–µ–≤–∏–∫–∏\"\n‚Ä¢ \"–°—Ç–∞—Ä—ã–µ –¥—Ä–∞–º—ã\"\n‚Ä¢ \"–§–∏–ª—å–º—ã 2000-—Ö\""
            
            return error_msg
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        if analysis.get("min_year") and analysis.get("max_year"):
            if analysis["min_year"] == analysis["max_year"]:
                year_info = f" –∑–∞ {analysis['min_year']} –≥–æ–¥"
            else:
                year_info = f" —Å {analysis['min_year']} –ø–æ {analysis['max_year']} –≥–æ–¥"
        else:
            year_info = ""
            
        response = f"üé¨ –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è –≤–∞—Å –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{user_message}\"{year_info}:\n\n"
        
        for i, movie in enumerate(movies, 1):
            response += f"{i}. **{movie['title']}**"
            if movie.get('year') and movie['year'] <= 2024:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≥–æ–¥–∞
                response += f" ({movie['year']})"
            response += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å–º, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –±–∞–∑–µ
            if movie.get('url'):
                response += f"   üîó [–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º]({movie['url']})\n"
            
            if movie.get('genres'):
                response += f"   üé≠ {movie['genres']}\n"
            if movie.get('description'):
                desc = movie['description']
                if len(desc) > 100:
                    desc = desc[:100] + "..."
                response += f"   üìñ {desc}\n"
            response += "\n"
        
        response += "üéâ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ–∏–ª—å–º—ã - –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ!"
        
        return response

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    ai = AIService()
    
    test_queries = [
        "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã 2021 –≥–æ–¥–∞",
        "–ö–æ–º–µ–¥–∏–∏ 2020 –≥–æ–¥–∞",
        "–°—Ç–∞—Ä—ã–µ —Å–æ–≤–µ—Ç—Å–∫–∏–µ –∫–æ–º–µ–¥–∏–∏",
        "–ù–æ–≤—ã–µ –¥—Ä–∞–º—ã", 
        "–§–∏–ª—å–º—ã 2000-—Ö –≥–æ–¥–æ–≤",
        "–ë–æ–µ–≤–∏–∫–∏ 2015-2020",
        "–ù–µ—Å—Ç–∞—Ä—ã–µ —Ç—Ä–∏–ª–ª–µ—Ä—ã",
        "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
        "–£–∂–∞—Å—ã 90-—Ö",
        "–î—Ä–∞–º—ã 2010-—Ö"
    ]
    
    for query in test_queries:
        print(f"\n{'='*60}")
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{query}'")
        result = ai.search_with_ai(query)
        print(f"üí¨ –û—Ç–≤–µ—Ç:\n{result['response']}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(result['movies'])}")