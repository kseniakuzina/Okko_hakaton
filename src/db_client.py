import psycopg2
from typing import List, Dict, Any

DB_CONFIG = {
    "host": "109.73.203.167",
    "port": 5432,
    "database": "default_db",
    "user": "vibethon",
    "password": "wCjP24a7&*N8"
}

def get_db_connection():
    return psycopg2.connect(**DB_CONFIG)

def search_movies(filters: Dict[str, Any]) -> List[Dict[str, Any]]:
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
    """
    conn = None
    cursor = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Å JOIN –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û: g.name –≤–º–µ—Å—Ç–æ g.genre_name
        query = """
            SELECT 
                t.title_id,
                t.serial_name as title,
                t.description,
                t.release_date,
                t.age_rating,
                STRING_AGG(g.name, ', ') as genres,
                t.url,
                t.content_type
            FROM title t
            LEFT JOIN title_genre tg ON t.title_id = tg.title_id
            LEFT JOIN genre g ON tg.genre_id = g.genre_id
            WHERE 1=1
        """
        params = []
        group_by = " GROUP BY t.title_id, t.serial_name, t.description, t.release_date, t.age_rating, t.url, t.content_type"

        # –§–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä—É
        if filters.get("genre"):
            query += " AND g.name ILIKE %s"
            params.append(f"%{filters['genre']}%")

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if filters.get("content_type"):
            query += " AND t.content_type = %s"
            params.append(filters["content_type"])

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        limit = min(filters.get("limit", 5), 20)
        query += group_by + f" LIMIT {limit}"

        print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
        print(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        cursor.execute(query, params)
        rows = cursor.fetchall()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        columns = ["id", "title", "description", "release_date", "age_rating", "genres", "url", "content_type"]
        results = [dict(zip(columns, row)) for row in rows]
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return results

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ search_movies: {e}")
        return []
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

def test_db_connection():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –∂–∞–Ω—Ä–∞–º–∏
        test_genres = ["–¥—Ä–∞–º–∞", "–∫–æ–º–µ–¥–∏—è", "–±–æ–µ–≤–∏–∫"]
        for genre in test_genres:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∂–∞–Ω—Ä–∞: {genre}")
            test_filters = {"genre": genre, "limit": 2}
            results = search_movies(test_filters)
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(results)}")
            for film in results:
                print(f"  - {film['title']} | {film['genres']}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False
    
def get_all_genres():
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã –∏–∑ –ë–î"""
    conn = None
    cursor = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT DISTINCT name FROM genre ORDER BY name")
        genres = [row[0] for row in cursor.fetchall()]
        
        print(f"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã –≤ –ë–î: {genres}")
        return genres
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–Ω—Ä–æ–≤: {e}")
        return []
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

def search_movies_by_keywords(user_message: str, limit: int = 5) -> List[Dict[str, Any]]:
    """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    message_lower = user_message.lower()
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –∂–∞–Ω—Ä–∞–º–∏
    keyword_to_genre = {
        '–∫–æ–º–µ–¥–∏—è': '–∫–æ–º–µ–¥–∏—è',
        '—Å–º–µ—Ö': '–∫–æ–º–µ–¥–∏—è', 
        '–≤–µ—Å–µ–ª': '–∫–æ–º–µ–¥–∏—è',
        '—é–º–æ—Ä': '–∫–æ–º–µ–¥–∏—è',
        '–¥—Ä–∞–º–∞': '–¥—Ä–∞–º–∞',
        '–≥—Ä—É—Å—Ç–Ω': '–¥—Ä–∞–º–∞',
        '–ø–µ—á–∞–ª': '–¥—Ä–∞–º–∞',
        '–±–æ–µ–≤–∏–∫': '–±–æ–µ–≤–∏–∫',
        '—ç–∫—à–Ω': '–±–æ–µ–≤–∏–∫',
        'action': '–±–æ–µ–≤–∏–∫',
        '—Å—Ç—Ä–µ–ª—å–±': '–±–æ–µ–≤–∏–∫',
        '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞': '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
        '–∫–æ—Å–º–æ—Å': '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
        '–±—É–¥—É—â': '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
        '–Ω–∞—É—á–Ω': '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
        '—É–∂–∞—Å': '—É–∂–∞—Å—ã',
        '—Ö–æ—Ä—Ä–æ—Ä': '—É–∂–∞—Å—ã',
        '—Å—Ç—Ä–∞—à–Ω': '—É–∂–∞—Å—ã',
        '—Ç—Ä–∏–ª–ª–µ—Ä': '—Ç—Ä–∏–ª–ª–µ—Ä',
        '–¥–µ—Ç–µ–∫—Ç–∏–≤': '–¥–µ—Ç–µ–∫—Ç–∏–≤',
        '–º–∏—Å—Ç–∏–∫': '–º–∏—Å—Ç–∏–∫–∞',
        '–ø—Ä–∏–∫–ª—é—á–µ–Ω': '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
        '—Ä–æ–º–∞–Ω': '–º–µ–ª–æ–¥—Ä–∞–º–∞',
        '–ª—é–±–æ–≤': '–º–µ–ª–æ–¥—Ä–∞–º–∞'
    }
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∂–∞–Ω—Ä
    for keyword, genre in keyword_to_genre.items():
        if keyword in message_lower:
            return search_movies({"genre": genre, "limit": limit})
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã
    return search_movies({"limit": limit})